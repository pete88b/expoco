# AUTOGENERATED! DO NOT EDIT! File to edit: 05a_ml_data.ipynb (unless otherwise specified).

__all__ = ['viseme_dataset_from_capture_sessions', 'VisemeDatasetHelper']

# Cell
from ..core import *
from pathlib import Path
import pandas as pd

# Cell
def viseme_dataset_from_capture_sessions(path='data/capture_session', glob_pattern='viseme*'):
    "Create a viseme dataset from capture session data"
    path, dataset_id= Path(path), now()
    output_path = path.parent/f'viseme_dataset_{dataset_id}'
    output_path.mkdir()
    log = LogFile(output_path/'data.log')
    log('output_path:', output_path.resolve())
    df = pd.DataFrame()
    for session_path in sorted(path.glob(glob_pattern)):
        expression_id = int(str(session_path)[-1])
        log('session_path:', session_path, 'expression_id:', expression_id)
        _df = pd.read_csv(session_path/'data.csv')
        _df['expression_id'] = expression_id
        df = pd.concat([df, _df])
    file_name=output_path/'data.csv'
    log('file_name:', file_name)
    df.to_csv(file_name, index=False)

# Cell
class VisemeDatasetHelper:
    def __init__(self, dataset_id, path='data', y_name='expression_id'):
        self.path = Path(path)/f'viseme_dataset_{dataset_id}'
        self.df = pd.read_csv(self.path/'data.csv')
        self.y_name = y_name
        self.output_path = self.path/f'processed_{now()}'
        self.output_path.mkdir()
        self.log = LogFile(self.output_path/'data.log')
        self.log('output_path:', self.output_path.resolve(),
                 '\ndataset_id:', dataset_id,
                 '\npath:', self.path.resolve(),
                 '\ny_name:', y_name)
    def make_landmarks_relative(self, to_landmark_id=FaceLandmarks.tip_of_nose):
        self.log('make_landmarks_relative to_landmark_id:', to_landmark_id)
        self.relative_to_landmark_id = to_landmark_id
        for i in range(FaceLandmarks.count):
            self.df[f'{i}x']=self.df[f'{i}x']-self.df[f'{to_landmark_id}x']
            self.df[f'{i}y']=self.df[f'{i}y']-self.df[f'{to_landmark_id}y']
        return self
    def normalize(self):
        mean, std = self.df[self.cont_names].mean(), self.df[self.cont_names].std()
        self.stats_df = pd.DataFrame([mean, std])
        file_name=self.output_path/'stats.csv'
        self.log('stats_file_name:', file_name)
        self.stats_df.to_csv(file_name, index=False)
        self.df.loc[:, self.cont_names] = (self.df.loc[:, self.cont_names] - mean) / std
        return self
    def combine_targets(self, change_expression_id, to_expression_id):
        self.log('combine_targets change_expression_id:', change_expression_id, 'to_expression_id:', to_expression_id)
        self.df.loc[self.df[self.y_name]==change_expression_id, self.y_name]=to_expression_id
        return self
    def setup_cont_names(self):
        relative_to_landmark_id = getattr(self, 'relative_to_landmark_id', -1)
        self.cont_names = []
        for i in FaceLandmarks.pointer + FaceLandmarks.mouth:
            if i == relative_to_landmark_id: continue
            self.cont_names.append(f'{i}x')
            self.cont_names.append(f'{i}y')
        self.log('cont_names:', self.cont_names)
        self.df = self.df[self.cont_names + [self.y_name]]
        return self
    def save(self):
        file_name=self.output_path/'data.csv'
        self.log('data_file_name:', file_name)
        self.df.to_csv(file_name, index=False)
        return self