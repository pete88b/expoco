# AUTOGENERATED! DO NOT EDIT! File to edit: 01a_camera_capture.ipynb (unless otherwise specified).

__all__ = ['capture_session', 'get_viseme_class']

# Cell
from .core import *
import numpy as np
import cv2, time, math, json
from pathlib import Path

# Cell
def _update_and_show(image, image_display_helper, text):
    image = cv2.flip(image, 1)
    image = cv2.putText(image, text, (20,40), cv2.FONT_HERSHEY_COMPLEX, 1, (20,20,20), 2)
    image = cv2.putText(image, text, (20,40), cv2.FONT_HERSHEY_COMPLEX, 1, (200,200,200), 1)
    image_display_helper.show(image)

# Cell
def _countdown(video_capture, image_display_helper, classes):
    for i in range(3,0,-1):
        retval, image = video_capture.read()
        _update_and_show(image, image_display_helper, f'Capture: {classes} in {i}')
        time.sleep(0.75)

# Cell
def capture_session(classes, stop_after, comments):
    "Run a video capture session"
    path = Path(f'data/capture_sessions/{now()}')
    path.mkdir(parents=True, exist_ok=True)
    video_capture = cv2.VideoCapture(0)
    width, height = [int(video_capture.get(p)) for p in [cv2.CAP_PROP_FRAME_WIDTH, cv2.CAP_PROP_FRAME_HEIGHT]]
    retval, image = video_capture.read()
    image_display_helper = ImageDisplayHelper(cv2.flip(image, 1), 'expoco: Capture session')
    try:
        _countdown(video_capture, image_display_helper, classes)
        metadata = dict(count=0, stop_after=stop_after, path=path_to_str(path), classes=classes,
                        capture_width=width, capture_height=height, start_date=now(),
                        comments=comments) # TODO: add relevant software versions etc
        for capture_count in range(1, stop_after+1):
            retval, image = video_capture.read()
            if not retval:
                raise Exception('Failed to read from video capture')
            assert cv2.imwrite(f'{path}/{capture_count}.png', image), 'Failed to save image'
            _update_and_show(image, image_display_helper, f'{classes}: {capture_count}')
            time.sleep(.05)
        metadata['count'] = capture_count
        metadata['end_date'] = now()
        with open(path/'metadata.json', 'w') as f: json.dump(metadata, f, indent=2)
    finally:
        video_capture.release()
    return path

# Cell
def get_viseme_class(metadata, viseme_classes=['NO_EXPRESSION', 'OO', 'EE', 'AH', 'RANDOM_TALK']):
    classes = metadata['classes'].split(' ')
    result = None
    for c in classes:
        if c in viseme_classes:
            if result is not None:
                raise Exception(f'Found multiple viseme classes in {classes}. Expected 1')
            result = c
    if result is None:
        raise Exception(f'Viseme class not found in {classes}')
    return result